---
layout: post
title: "Mac, Ubuntu initial settings"
date: 2020-12-18 16:00:00 +0900
categories: Programming
tags: [Mac, Ubuntu, OS, Setting]
# image: thumbnails/
---

> 개발을 할 때 개인적으로 맥과 우분투, 라즈베리 파이를 많이 사용합니다.  
> 새 우분투 vm을 만들거나 라즈베리 파이를 사용할 때 매번 처음부터 설정을 해야 합니다.  
> 그래서 그 작업을 쉽게 하기 위해 제가 사용하는 프로그램과 환경을 정리해봤습니다.  

{:.lang-en}

> When developing, I personally use Mac, Ubuntu and Raspberry Pi a lot.  
> In particular, when creating a new Ubuntu vm or RPi, I have to do the initial setup from scratch.  
> So I write this article to remember my settings.  

---

## [Homebrew](https://brew.sh/) [Mac]  

```bash
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

---

## [Git, Git-lfs](https://git-scm.com/downloads)  

```bash
# Mac
$ brew install git git-lfs

# Ubuntu, RPi
$ sudo apt install git git-lfs

# Configure git
$ git config --global user.name "Your Name"
$ git config --global user.email "you@your-domain.com"
```

---

## [D2Coding](https://github.com/naver/d2codingfont/releases) [Font]  

- 맥이나 우분투 GUI 모드에서는 [링크](https://github.com/naver/d2codingfont/releases)에서 압축파일을 받아 압축을 푼 후, ttc 파일을 사용해 쉽게 설치할 수 있습니다.  
- 우분투 CLI나 라즈베리 파이를 사용중이라면 아래 방법을 사용합니다.  

{:.lang-en}

- On Mac or Ubuntu GUI mode, unzip and doublick the ttc file in D2CodingAll directory. You can install the font easily.  
- If you are using Ubuntu CLI or RPi, try this.  

```bash
$ sudo cp your-font-file /usr/share/fonts/
$ sudo fc-cache -fv
$ sudo fc-list | grep "D2Coding"
```

---

## [wget](https://iterm2.com/downloads.html)  

```bash
# Mac
$ brew install wget

# Ubuntu, RPi
$ sudo apt install wget
```

---

## [vim](https://www.vim.org/download.php)  

```bash
# In mac, vim is already installed.

# Ubuntu, RPi
$ sudo apt install -y vim

$ wget https://raw.githubusercontent.com/cheesecat47/cheesecat47.github.io/master/assets/etc/vimrc
$ mv vimrc ~/.vimrc
$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
$ vim +PluginInstall +qall
```

---

## [iTerm2](https://iterm2.com/downloads.html) [Mac]

```zsh
$ brew install --cask iterm2
```

---

## [zsh & Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh)  

- zsh은 최근 맥에서는 기본 쉘로 설정되어 있습니다.  
- {:.lang-en}zsh is default shell on recent mac. Others need installation.  

```bash
# Mac. For update zsh.
$ brew install zsh

# Ubuntu, RPi
$ sudo apt install zsh
$ sudo chsh -s `which zsh`
```

#### Oh My Zsh  

```zsh
# oh-my-zsh
$ sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

#install zsh plug-ins
$ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
$ git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions

$ vi ~/.zshrc
```

- 플러그인에 추가해줍니다.  
- {:.lang-en}Add plugins.  

```plaintext
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    zsh-completions
)
```

- 변경사항을 적용합니다.  
- {:.lang-en}Apply the changes.  

```bash
$ source ~/.zshrc
```

---

## [Powerlevel10k](https://github.com/romkatv/powerlevel10k)  

- 터미널에 다양한 아이콘이 보이도록 하려면 전용 [폰트](https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k)를 설치해줍니다.  
- {:.lang-en}Install [fonts](https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k) for fancy icons. [Optional]  

![p10k]({{"assets/img/programming/201218_OS/2020-12-18-OS_init_p10k.png" | relative_url}}){:class="imgframe"}  

- powerlevel10k를 설치합니다.  
- {:.lang-en}Install powerlevel10k.  

```zsh
$ git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k

```

- 테마를 수정하고 적용합니다.
- {:.lang-en}Change and apply the theme.

```zsh
$ vi ~/.zshrc

> ZSH_THEME="powerlevel10k/powerlevel10k"

$ source ~/.zshrc
```

---

## tmux  

```zsh
# Mac
$ brew install tmux

# Ubuntu, RPi
$ sudo apt install tmux
```

- tmux 테마를 적용합니다.  
- {:.lang-en}Apply tmux theme. [Optional]  

```zsh
$ cd ~/
$ git clone https://github.com/gpakosz/.tmux.git
$ ln -s -f .tmux/.tmux.conf
$ cp .tmux/.tmux.conf.local .
```

- 마우스 동작을 허용합니다.  
- {:.lang-en}Set tmux to allow mouse. Modify `.tmux/.tmux.conf.local`  

```zsh
$ vi ~/.tmux/.tmux.conf.local

> set -g mouse on
```

---

## Docker & Docker Compose

- 맥에서는 [Docker Desktop on Mac](https://docs.docker.com/docker-for-mac/install/) 이 방법으로 설치해도 되고, 아래처럼 brew를 사용해도 됩니다.  
- {:.lang-en}On Mac, install [Docker Desktop on Mac](https://docs.docker.com/docker-for-mac/install/) or try this.  
  
    ```bash
    $ brew install --cask docker  
    ```
  
- 우분투와 라즈베리 파이에서는 도커와 컴포즈를 따로 설치해줘야 합니다.  
- {:.lang-en}On Ubuntu and RPi, you have to install each.  
  - {:.lang-en}Install [Docker](https://docs.docker.com/engine/install/ubuntu/) on Ubuntu.  

    ```bash
    $ sudo apt-get remove docker docker-engine docker.io containerd runc

    $ sudo apt-get update
    $ sudo apt-get install \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg-agent \
        software-properties-common

    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    $ sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"

    $ sudo apt-get update
    $ sudo apt-get install docker-ce docker-ce-cli containerd.io
    ```

  - {:.lang-en}Install [Docker Compose](https://docs.docker.com/compose/install/) on Ubuntu.
    - Docker-compose 버전은 계속 업데이트 되므로 원하는 버전으로 바꾸거나, 링크의 공식 문서를 참고하세요.  

    ```bash
    $ sudo curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    $ sudo chmod +x /usr/local/bin/docker-compose
    ```

  - {:.lang-en}Install [Docker](https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script) on RPi.

    ```bash
    $ curl -fsSL https://get.docker.com -o get-docker.sh
    $ sudo sh get-docker.sh
    ```

  - {:.lang-en}Install [Docker Compose](https://docs.docker.com/compose/install/#alternative-install-options) on RPi.

    ```bash
    $ sudo pip install docker-compose
    ```

---

## [bat](https://github.com/sharkdp/bat#installation)  

```bash
# Mac
$ brew install bat

# Ubuntu
$ sudo apt install bat

# Can't use on RPi

$ vi ~/.zshrc # or bashrc
> alias cat="bat" # "batcat" on Ubuntu
$ source ~/.zshrc
```

---

## [Portainer](https://documentation.portainer.io/v2.0/deploy/linux/)  

```bash
# Docker required
$ docker volume create portainer_data
$ docker run -d -p 9090:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce
```

---

## [VSCode](https://code.visualstudio.com/download)  

```bash
# Mac
$ brew install visual-studio-code

# Ubuntu
sudo snap install code --classic
```

---

## [Postman](https://www.postman.com/downloads/)  

```bash
# Mac
$ brew install --cask postman
```

---

## TablePlus  

- <https://tableplus.com/download>  

---

## [openinterminal](https://github.com/Ji4n1ng/OpenInTerminal) [Mac]

```zsh
$ brew install --cask openinterminal-lite
```

---

## References

- <https://subicura.com/2017/11/22/mac-os-development-environment-setup.html>  
- <https://m.blog.naver.com/PostView.nhn?blogId=chandong83&logNo=220886603829&proxyReferer=https:%2F%2Fwww.google.com%2F>
- <https://jamix.tistory.com/41>
- <https://toshi15shkim.github.io/articles/2019-07/linux-docker-install>
