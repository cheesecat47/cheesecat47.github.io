---
layout: post
title: "[Algorithm] Candidate Key"
date: 2020-05-05 14:00:00 +0900
categories: Programming
tags: [Algorithm, Programmers, Kakao]
# image: thumbnails/2020-01-18-Algorithm-baekjoon7562.png
---

# [from Programmers](https://programmers.co.kr/learn/courses/30/lessons/42890?language=python3){:target="blank"}

## Conditions

- 관계 데이터베이스에서 릴레이션의 튜플을 유일하게 식별할 수 있는 속성 또는 속성의 집합 중, 다음 두 성질을 만족하는 것을 후보 키라고 한다.
    - 유일성: 릴레이션에 있는 모든 튜플에 대해 유일하게 식별되어야 한다.
    - 최소성: 유일성을 가진 키를 구성하는 속성 중 하나라도 제외하는 경우 유일성이 깨지는 것을 의미한다. 즉, 릴레이션의 모든 튜플을 유일하게 식별하는데 꼭 필요한 속성들로만 구성되어야 한다.
- 릴레이션은 2차원 문자열 배열이다.
- 릴레이션의 열의 길이는 1이상 8이하이며, 각 컬럼은 속성을 나타낸다.
- 행의 길이는 1이상 20이하이며, 각 열은 튶플을 나타낸다.
- 모든 문자열의 길이는 1이상 8이하이며, 알파벳 소문자와 숫자로만 이루어져 있다.
- 중복되는 튜플은 없다.

## Samples

- [["100","ryan","music","2"],["200","apeach","math","2"],["300","tube","computer","3"],["400","con","computer","4"],["500","muzi","music","3"],["600","apeach","music","2"]]  
    - 가능한 경우: "0", ["1","2"] -> answer: 2
- [["1","a"],["2","b"],["3","c"],["4","d"]]
    - 가능한 경우: "0", "1" -> answer: 2
    - ["0","1"]은 최소성을 만족하지 못하므로 될 수 없다.
- [["1", "a", "x", "m"], ["1", "a", "y", "m"], ["1", "a", "x", "m"], ["1", "a", "x", "n"]]
    -  ["0","1","2"] 모두 사용해야 구분 가능 -> answer: 1


## Brute force

- 우선 모든 튜플에서 다른 값을 가지는 하나의 속성이 있는지 찾는다.
- 중복 값이 있는 속성을 따로 모아두고, 이 그룹에서 조합해서 후보키가 될 수 있는지 찾는다.

{% highlight python %}
def solution(relation):
    answer = 0
    
    r = len(relation)
    c = len(relation[0])

    notCandidate = []
    isLast = True
    for j in range(c):
        thisCol = []
        for i in range(r):
            if relation[i][j] not in thisCol:
                thisCol.append(relation[i][j])
            else:
                notCandidate.append(j)
                isLast = False
                break
        if isLast: answer += 1 
        else: isLast = True
    
    print('notCandidate', notCandidate)
    isLast = True
    for i in range(len(notCandidate)):
        for j in range(i+1,len(notCandidate)):
            thisCol = []
            print(i, j)
            for k in range(r):
                thisTuple = [relation[k][notCandidate[i]], relation[k][notCandidate[j]]]
                print('thisTuple', thisTuple)
                if thisTuple not in thisCol:
                    thisCol.append(thisTuple)
                else:
                    isLast = False
                    break
            print('thisCol',thisCol)
            if isLast: answer += 1 
            else: isLast = True
                
    return answer
{% endhighlight %}


## Optimization


## Review


## Remember


