---
layout: post
title: "[PS] Crossing the stepping-stone"
date: 2020-05-08 15:00:00 +0900
categories: Programming
tags: [Algorithm, Programmers, Kakao]
# image: thumbnails/2020-01-18-Algorithm-baekjoon7562.png
---

# [from Programmers](https://programmers.co.kr/learn/courses/30/lessons/64062?language=python3){:target="blank"}

## Conditions

## Brute force

```python
def solution(stones, k):
    answer = 0
    
    friend = 1
    while friend:
        jump = 0
        for i in range(len(stones)):
            if stones[i] == 0:
                jump += 1
            else:
                if jump == k:
                    return friend - 1    
                stones[i] -= 1
                jump = 0
        friend += 1
        
    return answer
```

- 처음 버전. 0이 아닌 징검다리를 밟았을 때 k칸 이상 뛰는 것은 불가능하므로 반환하고 끝내게 했음.
- 에러 발생. 왜?
- [2, 4, 5, 3, 2, 1, 4, 1, 1, 1], k=3인 경우 첫 친구가 통과하고 배열 마지막이 0, 0, 0으로 된 상태에서 두 번째가 통과할 땐 jump = 3이 되지만, 검사를 할 수가 없다.

```python
            if stones[i] == 0:
                jump += 1
                if jump == k:
                    return friend - 1
```

- stones[i]가 0이더라도 jump를 검사하는 조건을 추가해준다.
- 사소한 실수지만 이런 것 때문에 문제를 틀린다. 주의하자.

<!-- 전체코드 -->
<!-- ```python
def solution(stones, k):
    answer = 0
    
    friend = 1
    while friend:
        jump = 0
        for i in range(len(stones)):
            if stones[i] == 0:
                jump += 1
                if jump == k:
                    return friend - 1
            else:
                if jump == k:
                    return friend - 1    
                stones[i] -= 1
                jump = 0
        friend += 1
        
    return answer
``` -->

- 이 문제는 정확성과 효율성을 모두 테스트한다.
- 정확성 테스트는 최대 테스트 17 〉 통과 (98.34ms, 10.9MB)로 통과했지만, 효율성 테스트는 모두 실패했다.

## Big-O notation

- 그 이유를 알아보자.
- stones는 최대 200,000이고, 배열 각 원소의 값은 최대 200,000,000이므로 알고리즘을 변경할 필요가 있다.

## Optimization

```python
def solution(stones, k):
    answer = 0
    
    stone_cnt = {}
    for stone in stones:
        stone_cnt[stone] = stone_cnt.get(stone, 0) + 1
    sorted_stone_cnt = sorted(stone_cnt)
    
    prev = 0
    for stone in sorted_stone_cnt:
        stone_delta = stone - prev
        jump = 0
        for i in range(len(stones)):
            if stones[i] == 0:
                jump += 1
                if jump == k:
                    return answer
            else:
                if jump == k:
                    return answer
                stones[i] -= stone_delta
                jump = 0
        prev = stone
        answer += stone_delta
    
    return answer
```

- 만약 테스트케이스가 [100000, 210000, ...] 이런 경우라면 첫 번째 코드는 1부터 반복하므로 시간이 오래 걸릴 것이라 생각했다.
- 그래서 딕셔너리를 사용해 원소를 세고, 키값만 사용해 정렬한 후 작은 값부터 delta로 사용하려고 했다.
- 이 경우엔 가장 작은 원소가 100000이라면 1부터 100000까지 반복 없이, answer에 바로 100000를 더하면 되기 때문이다.
- 그런데, 결과적으로는 실행시간에 큰 차이가 없었다.
- 결국 이 코드도 stones 배열을 여러 번 반복해야 되는건 같아서 그런 것 같다.

- 최대: 테스트 17 〉 통과 (91.99ms, 10.9MB)

## Remember
